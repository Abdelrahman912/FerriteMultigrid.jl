var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"J. B. Schroder. Generalizing Smoothed Aggregation-Based Algebraic Multigrid. PhD dissertation, University of Illinois at Urbana-Champaign (Urbana, Illinois, 2010).\n\n\n\n","category":"page"},{"location":"tutorials/linear_elasticity/#tutorial-linear-elasticity","page":"Linear Elasticity","title":"Linear Elasticity","text":"","category":"section"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"(Image: )","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"Figure 1: Linear elastically deformed 1mm times 1mm Ferrite logo.","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"note: Note\nThe full explanation for the underlying FEM theory in this example can be found in the Linear Elasticity tutorial of the Ferrite.jl documentation.","category":"page"},{"location":"tutorials/linear_elasticity/#Implementation","page":"Linear Elasticity","title":"Implementation","text":"","category":"section"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"The following code is based on the Linear Elasticity tutorial from the Ferrite.jl documentation, with some comments removed for brevity. There are two main modifications:","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"Second-order Lagrange shape functions are used for field approximation: ip = Lagrange{RefTriangle,2}()^2.\nFour quadrature points are used to accommodate the second-order shape functions: qr = QuadratureRule{RefTriangle}(4).","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"using Ferrite, FerriteGmsh, SparseArrays\nusing Downloads: download\n\nEmod = 200.0e3 # Young's modulus [MPa]\nν = 0.3        # Poisson's ratio [-]\n\nGmod = Emod / (2(1 + ν))  # Shear modulus\nKmod = Emod / (3(1 - 2ν)) # Bulk modulus\n\nC = gradient(ϵ -> 2 * Gmod * dev(ϵ) + 3 * Kmod * vol(ϵ), zero(SymmetricTensor{2,2}))\n\nfunction assemble_external_forces!(f_ext, dh, facetset, facetvalues, prescribed_traction)\n    # Create a temporary array for the facet's local contributions to the external force vector\n    fe_ext = zeros(getnbasefunctions(facetvalues))\n    for facet in FacetIterator(dh, facetset)\n        # Update the facetvalues to the correct facet number\n        reinit!(facetvalues, facet)\n        # Reset the temporary array for the next facet\n        fill!(fe_ext, 0.0)\n        # Access the cell's coordinates\n        cell_coordinates = getcoordinates(facet)\n        for qp in 1:getnquadpoints(facetvalues)\n            # Calculate the global coordinate of the quadrature point.\n            x = spatial_coordinate(facetvalues, qp, cell_coordinates)\n            tₚ = prescribed_traction(x)\n            # Get the integration weight for the current quadrature point.\n            dΓ = getdetJdV(facetvalues, qp)\n            for i in 1:getnbasefunctions(facetvalues)\n                Nᵢ = shape_value(facetvalues, qp, i)\n                fe_ext[i] += tₚ ⋅ Nᵢ * dΓ\n            end\n        end\n        # Add the local contributions to the correct indices in the global external force vector\n        assemble!(f_ext, celldofs(facet), fe_ext)\n    end\n    return f_ext\nend\n\nfunction assemble_cell!(ke, cellvalues, C)\n    for q_point in 1:getnquadpoints(cellvalues)\n        # Get the integration weight for the quadrature point\n        dΩ = getdetJdV(cellvalues, q_point)\n        for i in 1:getnbasefunctions(cellvalues)\n            # Gradient of the test function\n            ∇Nᵢ = shape_gradient(cellvalues, q_point, i)\n            for j in 1:getnbasefunctions(cellvalues)\n                # Symmetric gradient of the trial function\n                ∇ˢʸᵐNⱼ = shape_symmetric_gradient(cellvalues, q_point, j)\n                ke[i, j] += (∇Nᵢ ⊡ C ⊡ ∇ˢʸᵐNⱼ) * dΩ\n            end\n        end\n    end\n    return ke\nend\n\nfunction assemble_global!(K, dh, cellvalues, C)\n    # Allocate the element stiffness matrix\n    n_basefuncs = getnbasefunctions(cellvalues)\n    ke = zeros(n_basefuncs, n_basefuncs)\n    # Create an assembler\n    assembler = start_assemble(K)\n    # Loop over all cells\n    for cell in CellIterator(dh)\n        # Update the shape function gradients based on the cell coordinates\n        reinit!(cellvalues, cell)\n        # Reset the element stiffness matrix\n        fill!(ke, 0.0)\n        # Compute element contribution\n        assemble_cell!(ke, cellvalues, C)\n        # Assemble ke into K\n        assemble!(assembler, celldofs(cell), ke)\n    end\n    return K\nend\n\nfunction linear_elasticity_2d(C)\n    logo_mesh = \"logo.geo\"\n    asset_url = \"https://raw.githubusercontent.com/Ferrite-FEM/Ferrite.jl/gh-pages/assets/\"\n    isfile(logo_mesh) || download(string(asset_url, logo_mesh), logo_mesh)\n\n    grid = togrid(logo_mesh)\n    addfacetset!(grid, \"top\", x -> x[2] ≈ 1.0) # facets for which x[2] ≈ 1.0 for all nodes\n    addfacetset!(grid, \"left\", x -> abs(x[1]) < 1.0e-6)\n    addfacetset!(grid, \"bottom\", x -> abs(x[2]) < 1.0e-6)\n\n    dim = 2\n    order = 2 # quadratic interpolation\n    ip = Lagrange{RefTriangle,order}()^dim # vector valued interpolation\n\n    qr = QuadratureRule{RefTriangle}(4) # 4 quadrature point\n    qr_face = FacetQuadratureRule{RefTriangle}(1)\n\n    cellvalues = CellValues(qr, ip)\n    facetvalues = FacetValues(qr_face, ip)\n\n    dh = DofHandler(grid)\n    add!(dh, :u, ip)\n    close!(dh)\n\n    ch = ConstraintHandler(dh)\n    add!(ch, Dirichlet(:u, getfacetset(grid, \"bottom\"), (x, t) -> 0.0, 2))\n    add!(ch, Dirichlet(:u, getfacetset(grid, \"left\"), (x, t) -> 0.0, 1))\n    close!(ch)\n\n    traction(x) = Vec(0.0, 20.0e3 * x[1])\n\n    A = allocate_matrix(dh)\n    assemble_global!(A, dh, cellvalues, C)\n\n    b = zeros(ndofs(dh))\n    assemble_external_forces!(b, dh, getfacetset(grid, \"top\"), facetvalues, traction)\n    apply!(A, b, ch)\n\n    return A, b, dh, cellvalues, ch\nend","category":"page"},{"location":"tutorials/linear_elasticity/#Near-Null-Space-(NNS)","page":"Linear Elasticity","title":"Near Null Space (NNS)","text":"","category":"section"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"In multigrid methods for problems with vector-valued unknowns, such as linear elasticity, the near null space represents the low energy mode or the smooth error that needs to be captured in the coarser grid when using SA-AMG (Smoothed Aggregation Algebraic Multigrid), more on the topic can be found  in Schroder [1].","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"For 2D linear elasticity problems, the rigid body modes are:","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"Translation in the x-direction,\nTranslation in the y-direction,\nRotation about the z-axis (i.e., x_3): each point (x, y) is mapped to (-y, x).","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"The function create_nns constructs the NNS matrix B ∈ ℝ^{n × 3}, where n is the number of degrees of freedom (DOFs) for the case of p = 1 (i.e., linear interpolation), because B is only relevant for AMG.","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"function create_nns(dh)\n    ##Ndof = ndofs(dh)\n    grid = dh.grid\n    Ndof = 2 * (grid.nodes |> length) # nns at p = 1 for AMG\n    B = zeros(Float64, Ndof, 3)\n    B[1:2:end, 1] .= 1 # x - translation\n    B[2:2:end, 2] .= 1 # y - translation\n\n    # in-plane rotation (x,y) → (-y,x)\n    coords = reduce(hcat, grid.nodes .|> (n -> n.x |> collect))' # convert nodes to 2d array\n    y = coords[:, 2]\n    x = coords[:, 1]\n    B[1:2:end, 3] .= -y\n    B[2:2:end, 3] .= x\n    return B\nend","category":"page"},{"location":"tutorials/linear_elasticity/#Setup-the-linear-elasticity-problem","page":"Linear Elasticity","title":"Setup the linear elasticity problem","text":"","category":"section"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"Load FerriteMultigrid to access the p-multigrid solver.","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"using FerriteMultigrid","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"Construct the linear elasticity problem with 2nd order polynomial shape functions.","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"A, b, dh, cellvalues, ch = linear_elasticity_2d(C);\nnothing #hide","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"Construct the near null space (NNS) matrix","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"B = create_nns(dh)","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"danger: Danger\nSince NNS matrix is only relevant for AMG, and it is not used in the p-multigrid solver, therefore, B has to provided using linear field approximation (i.e., p = 1) when using AMG as the coarse solver, otherwise (e.g., using Pinv as the coarse solver), then we don't have to provide it.","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"Construct the finite element space mathcalV_hp = 2","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"fe_space = FESpace(dh, cellvalues, ch)","category":"page"},{"location":"tutorials/linear_elasticity/#P-multigrid-Configuration","page":"Linear Elasticity","title":"P-multigrid Configuration","text":"","category":"section"},{"location":"tutorials/linear_elasticity/#1.-Galerkin-Coarsening-Strategy","page":"Linear Elasticity","title":"1. Galerkin Coarsening Strategy","text":"","category":"section"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"config_gal = pmultigrid_config(coarse_strategy = Galerkin())\nx_gal, res_gal = solve(A, b,fe_space, config_gal;B = B, log=true, rtol = 1e-10)","category":"page"},{"location":"tutorials/linear_elasticity/#2.-Rediscretization-Coarsening-Strategy","page":"Linear Elasticity","title":"2. Rediscretization Coarsening Strategy","text":"","category":"section"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"# Rediscretization Coarsening Strategy\nconfig_red = pmultigrid_config(coarse_strategy = Rediscretization(LinearElasticityMultigrid(C)))\nx_red, res_red = solve(A, b, fe_space, config_red; B = B, log=true, rtol = 1e-10)","category":"page"},{"location":"tutorials/linear_elasticity/#Test-the-solution","page":"Linear Elasticity","title":"Test the solution","text":"","category":"section"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"using Test\n@testset \"Linear Elasticity Example\" begin\n    println(\"Final residual with Galerkin coarsening: \", res_gal[end])\n    @test A * x_gal ≈ b\n    println(\"Final residual with Rediscretization coarsening: \", res_red[end])\n    @test A * x_red ≈ b\nend","category":"page"},{"location":"tutorials/linear_elasticity/#linear-elasticity-plain-program","page":"Linear Elasticity","title":"Plain program","text":"","category":"section"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"Here follows a version of the program without any comments. The file is also available here: linear_elasticity.jl.","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"using Ferrite, FerriteGmsh, SparseArrays\nusing Downloads: download\n\nEmod = 200.0e3 # Young's modulus [MPa]\nν = 0.3        # Poisson's ratio [-]\n\nGmod = Emod / (2(1 + ν))  # Shear modulus\nKmod = Emod / (3(1 - 2ν)) # Bulk modulus\n\nC = gradient(ϵ -> 2 * Gmod * dev(ϵ) + 3 * Kmod * vol(ϵ), zero(SymmetricTensor{2,2}))\n\nfunction assemble_external_forces!(f_ext, dh, facetset, facetvalues, prescribed_traction)\n    # Create a temporary array for the facet's local contributions to the external force vector\n    fe_ext = zeros(getnbasefunctions(facetvalues))\n    for facet in FacetIterator(dh, facetset)\n        # Update the facetvalues to the correct facet number\n        reinit!(facetvalues, facet)\n        # Reset the temporary array for the next facet\n        fill!(fe_ext, 0.0)\n        # Access the cell's coordinates\n        cell_coordinates = getcoordinates(facet)\n        for qp in 1:getnquadpoints(facetvalues)\n            # Calculate the global coordinate of the quadrature point.\n            x = spatial_coordinate(facetvalues, qp, cell_coordinates)\n            tₚ = prescribed_traction(x)\n            # Get the integration weight for the current quadrature point.\n            dΓ = getdetJdV(facetvalues, qp)\n            for i in 1:getnbasefunctions(facetvalues)\n                Nᵢ = shape_value(facetvalues, qp, i)\n                fe_ext[i] += tₚ ⋅ Nᵢ * dΓ\n            end\n        end\n        # Add the local contributions to the correct indices in the global external force vector\n        assemble!(f_ext, celldofs(facet), fe_ext)\n    end\n    return f_ext\nend\n\nfunction assemble_cell!(ke, cellvalues, C)\n    for q_point in 1:getnquadpoints(cellvalues)\n        # Get the integration weight for the quadrature point\n        dΩ = getdetJdV(cellvalues, q_point)\n        for i in 1:getnbasefunctions(cellvalues)\n            # Gradient of the test function\n            ∇Nᵢ = shape_gradient(cellvalues, q_point, i)\n            for j in 1:getnbasefunctions(cellvalues)\n                # Symmetric gradient of the trial function\n                ∇ˢʸᵐNⱼ = shape_symmetric_gradient(cellvalues, q_point, j)\n                ke[i, j] += (∇Nᵢ ⊡ C ⊡ ∇ˢʸᵐNⱼ) * dΩ\n            end\n        end\n    end\n    return ke\nend\n\nfunction assemble_global!(K, dh, cellvalues, C)\n    # Allocate the element stiffness matrix\n    n_basefuncs = getnbasefunctions(cellvalues)\n    ke = zeros(n_basefuncs, n_basefuncs)\n    # Create an assembler\n    assembler = start_assemble(K)\n    # Loop over all cells\n    for cell in CellIterator(dh)\n        # Update the shape function gradients based on the cell coordinates\n        reinit!(cellvalues, cell)\n        # Reset the element stiffness matrix\n        fill!(ke, 0.0)\n        # Compute element contribution\n        assemble_cell!(ke, cellvalues, C)\n        # Assemble ke into K\n        assemble!(assembler, celldofs(cell), ke)\n    end\n    return K\nend\n\nfunction linear_elasticity_2d(C)\n    logo_mesh = \"logo.geo\"\n    asset_url = \"https://raw.githubusercontent.com/Ferrite-FEM/Ferrite.jl/gh-pages/assets/\"\n    isfile(logo_mesh) || download(string(asset_url, logo_mesh), logo_mesh)\n\n    grid = togrid(logo_mesh)\n    addfacetset!(grid, \"top\", x -> x[2] ≈ 1.0) # facets for which x[2] ≈ 1.0 for all nodes\n    addfacetset!(grid, \"left\", x -> abs(x[1]) < 1.0e-6)\n    addfacetset!(grid, \"bottom\", x -> abs(x[2]) < 1.0e-6)\n\n    dim = 2\n    order = 2 # quadratic interpolation\n    ip = Lagrange{RefTriangle,order}()^dim # vector valued interpolation\n\n    qr = QuadratureRule{RefTriangle}(4) # 4 quadrature point\n    qr_face = FacetQuadratureRule{RefTriangle}(1)\n\n    cellvalues = CellValues(qr, ip)\n    facetvalues = FacetValues(qr_face, ip)\n\n    dh = DofHandler(grid)\n    add!(dh, :u, ip)\n    close!(dh)\n\n    ch = ConstraintHandler(dh)\n    add!(ch, Dirichlet(:u, getfacetset(grid, \"bottom\"), (x, t) -> 0.0, 2))\n    add!(ch, Dirichlet(:u, getfacetset(grid, \"left\"), (x, t) -> 0.0, 1))\n    close!(ch)\n\n    traction(x) = Vec(0.0, 20.0e3 * x[1])\n\n    A = allocate_matrix(dh)\n    assemble_global!(A, dh, cellvalues, C)\n\n    b = zeros(ndofs(dh))\n    assemble_external_forces!(b, dh, getfacetset(grid, \"top\"), facetvalues, traction)\n    apply!(A, b, ch)\n\n    return A, b, dh, cellvalues, ch\nend\n\nfunction create_nns(dh)\n    ##Ndof = ndofs(dh)\n    grid = dh.grid\n    Ndof = 2 * (grid.nodes |> length) # nns at p = 1 for AMG\n    B = zeros(Float64, Ndof, 3)\n    B[1:2:end, 1] .= 1 # x - translation\n    B[2:2:end, 2] .= 1 # y - translation\n\n    # in-plane rotation (x,y) → (-y,x)\n    coords = reduce(hcat, grid.nodes .|> (n -> n.x |> collect))' # convert nodes to 2d array\n    y = coords[:, 2]\n    x = coords[:, 1]\n    B[1:2:end, 3] .= -y\n    B[2:2:end, 3] .= x\n    return B\nend\n\nusing FerriteMultigrid\n\nA, b, dh, cellvalues, ch = linear_elasticity_2d(C);\n\nB = create_nns(dh)\n\nfe_space = FESpace(dh, cellvalues, ch)\n\nconfig_gal = pmultigrid_config(coarse_strategy = Galerkin())\nx_gal, res_gal = solve(A, b,fe_space, config_gal;B = B, log=true, rtol = 1e-10)\n\n# Rediscretization Coarsening Strategy\nconfig_red = pmultigrid_config(coarse_strategy = Rediscretization(LinearElasticityMultigrid(C)))\nx_red, res_red = solve(A, b, fe_space, config_red; B = B, log=true, rtol = 1e-10)\n\nusing Test\n@testset \"Linear Elasticity Example\" begin\n    println(\"Final residual with Galerkin coarsening: \", res_gal[end])\n    @test A * x_gal ≈ b\n    println(\"Final residual with Rediscretization coarsening: \", res_red[end])\n    @test A * x_red ≈ b\nend","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"","category":"page"},{"location":"tutorials/linear_elasticity/","page":"Linear Elasticity","title":"Linear Elasticity","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#FerriteMultigrid","page":"Home","title":"FerriteMultigrid","text":"","category":"section"}]
}
